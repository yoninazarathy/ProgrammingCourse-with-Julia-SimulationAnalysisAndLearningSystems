# Unit 2: Basics

To introduce things say you have an array of values and want to find the maximal value. How would you do it? Here is some Julia code:

<!---
Before anything - a 10-20 minute demo.... e.g. expected number of findings of minimum when searching through an array.... or Resvouir sampling
--->
```julia
using Random

# Make the program generate the same data every time it runs
Random.seed!(42)

function find_max(data)
    max_value = -Inf
    for x in data
        if x > max_value
            max_value = x
        end
    end
    return max_value
end

Random.seed!(0)
data = rand(100)
max_value = find_max(data)
println("Found maximal value: $(max_value)")
```

**Here is a question**: How many times was a new maximum found?

Let's count.

```julia
using Random

function find_max(data)
    max_value = -Inf
    n = 0
    for x in data
        if x > max_value
            n = n+1
            max_value = x
        end
    end
    return (max_value, n)
end

Random.seed!(0)
data = rand(100)
(max_value, n) = find_max(data)
println("Found maximal value: $(max_value)")
println("There were $n records along the way.")
```

But for different data (different seed) obviously there are a different number of possible records...

```julia
Random.seed!(1)
data = rand(100)
max_value, n = find_max(data)
println("Found maximal value: $(max_value)")
println("There were $n records along the way.")
```

How many on average? Denote the number of records for $n$ data points by $X_n$ then,
$$
X_n = I_1 + I_2 + \ldots + I_n,
$$
where,
$$
I_i =
\begin{cases}
1 & \text{if}~i~\text{'th data point is a record}, \\
0 & \text{otherwise}.
\end{cases}
$$
Now,
$$
{\mathbb E}[X_n] = {\mathbb E}[I_1] + {\mathbb E}[I_2] + \ldots + {\mathbb E}[I_n]. 
$$
Observe that ${\mathbb E}[I_i] = {\mathbb P}(I_i = 1)$ and for statistically independent and identically distributed data points we have,
$$
{\mathbb P}(I_i = 1) = \frac{1}{i},
$$
why? 

Hence,
$$
{\mathbb E}[X_n] = h_n = \sum_{i=1}^n \frac{1}{i},
$$
the harmonic sum. It is known that
$$
h_n = \log(n) + \gamma + o(1),
$$
where $\gamma$ is the [Euler–Mascheroni constant](https://en.wikipedia.org/wiki/Euler%E2%80%93Mascheroni_constant) and $o(1)$ is a term that vanishes as $n \to \infty$. That is 
$$
h_n \approx \log(n) + \gamma.
$$
Let's see it...
```julia
using Plots

println("γ = $(Float64(MathConstants.γ))")  #\gamma + [TAB]

h(n) = sum(1/i for i in 1:n)
approx_h(n) = log(n) + MathConstants.γ

for n in 1:10
    println("$(n)\t$(h(n))\t$(approx_h(n))")
end

err = [h(n) - approx_h(n) for n in 1:20]

scatter(1:20, err, xticks=1:20, xlabel="n", ylabel = "Error", ylim = (0, 0.5), legend=false)
```

Here is a Monte Carlo estimate and a histogram of the distribution:
```julia
using Statistics

records = []

for s in 1:10^5
    Random.seed!(s)
    data = rand(100)
    (_, n) = find_max(data)
    push!(records, n)
end
println("log(100) + γ = $(approx_h(100)), Monte Carlo Estimate: $(mean(records))")

histogram(records, ticks = 1:maximum(records), normed=true, xlabel="n", ylabel="probability", legend=false)
```

## Preamble (before really getting into code)

Here is some general information to discuss before getting to the nitty gritty. 

#### What we assume you "already know"

You are coming to this course after doing several mathematics and statistics courses. Hence we assume you have already done some coding or scripting of sorts. For example you might have done a bit of [Python](https://en.wikipedia.org/wiki/Python_(programming_language)), some [MATLAB](https://en.wikipedia.org/wiki/MATLAB) scripting, used some code in [R](https://en.wikipedia.org/wiki/R_(programming_language)), or similar. In all these cases, we assume that you've already experienced a bit of the following:

* You have written some commands/code that are later interpreted by the computer to execute actions.
* You are aware that in a computer program you typically define variables; often giving them meaningful names.
* You know that you can make computers do the same action again and again, by wrapping code in loops, often using conditional statements (`if`) to decide how the program should continue.
* You have even used and/or written a few functions (or routines) where you specify how some action should be done and describe that action in a function.
* You certainly know how to use files, directories, and the internet. 
* Finally, you are also somewhat of a mathematician. You have done courses such as STAT1301 (first year stats), MATH1071 (Analysis + Linear Algebra) + MATH1072 (Mutivariable Calculus + some modelling) + several more math electives.

#### Early computation

* [Ready reckoner](https://en.wikipedia.org/wiki/Ready_reckoner)
* [Computer (original meaning)](https://en.wikipedia.org/wiki/Computer_(occupation))

[![Women coding image](../web_img/women_coders.jpg)](https://cacm.acm.org/news/234820-the-secret-history-of-women-in-coding/fulltext)

* [Ancient analogue computer](https://en.wikipedia.org/wiki/Antikythera_mechanism)
* [Babbage's Difference Engine](https://en.wikipedia.org/wiki/Difference_engine)
* [Karakuri](https://en.wikipedia.org/wiki/Karakuri_puppet) and [Automata](https://en.wikipedia.org/wiki/Automaton)
* [Curta (mechanical calculator)](https://en.wikipedia.org/wiki/Curta)
* [Norden bombsight](https://en.wikipedia.org/wiki/Norden_bombsight)

#### What is a computer?

Wikipedia says this about a [computer](https://en.wikipedia.org/wiki/Computer):
> A computer is a machine that can be programmed to carry out sequences of arithmetic or logical operations automatically. 

[![Ada](../web_img/ada.jpg)](https://en.wikipedia.org/wiki/Ada_Lovelace "Ada Lovelace")

We can live with this definition. Here are some notes and bits.

Most computers today implement some form of the [von Neumann architecture](https://en.wikipedia.org/wiki/Von_Neumann_architecture). It means there are processing units (CPUs), memory, external (slower) storage, and multiple input out mechanisms. There are multiple forms to this but in most cases the following components exist:

* A set of instructions is executed via hardware. The instructions are sometimes themselves encoded in hardware, but are often written in software and can be changed.
* There is memory, and often multiple forms of memory. Fast memory near the CPU (cache), RAM (Random Access Memory) allowing the CPU to compute, disk memory, and even more memory (almost infinite) on the internet.
* There are often higher order abstractions that organize the way instructions are executed by the CPU(s). This is typically an operating system (Linux, Mac OS, Windows, iOS, Android, etc...).

You should also know of the conceptual mathematical model of a computer which is typically the [Turing machine](https://en.wikipedia.org/wiki/Turing_machine). The nice thing about such an abstraction is that it often helps understand what and how certain algorithms operate, as well as their limitations. There are also related computer theoretic notions such as [Finite Automata](https://en.wikipedia.org/wiki/Deterministic_finite_automaton). We don't get too much into such computer science/discrete math notions in the course. However, it is very interesting stuff, that lies at the centre of mathematics and computer science. 

[![Alan Turing](../web_img/alan-turing.jpg)](https://en.wikipedia.org/wiki/Alan_Turing)

#### The culture of software development and Who is a programmer?

Two software aphorisms to consider as you progress:

* "code is read much more often than it is written"
* "There are only two hard things in Computer Science: cache invalidation and naming things"

Some general observations of the teething difficulties of working in software as a mathematician:

* Big complaint of software engineers interacting with mathematicians is "black box of code that isn't easy to follow".
* In academia, code is an artifact of doing research work. Outside academia code is the output.
* If code was treated like writing a paper (or was a research output valued by itself), this transition would be smoother.
* Mathematicians can bring value at many levels of an organisation, as you will be interacting with a diverse set of people. Communication skills are important, so treat code as one way of communicating.

#### Bits, bytes, hex, binary, and the works...

A bit is either $0$ or $1$. A byte is a sequence of $8$ bits. Hence there are $2^8 = 256$ options. 

If you use a byte to encode an integer, then one option is the range $0,1,2,\ldots,255$. This is called an unsigned integer, or `UInt8` in Julia. 

Another option is the range $-127,\ldots,128$ (still $256$ possibilities) and this is called an `Int8`.


```julia
println("Unsigned 8 bit integers\n")
println("Number \tBinary  \tHexadecimal\tJulia representation")
for n in 0:255
    if n ≤ 18 || n ≥ 250 #\le + [TAB],  \ge + [TAB]
        println("$(lpad(string(n), 3)):\t$(bitstring(UInt8(n)))\t$(lpad(string(n, base = 16), 2))\t\t$(repr(UInt8(n)))")
    elseif n ∈ 19:21 #in(n,19:21)  \in + [TAB]
        println("\t   ⋮")
    end
end
```

```julia
println("Signed 8 bit integers (observe the sign bit)\n")
println("Number \tBinary")
for n in -128:127
    if n ∈ -128:-120 || n ∈ -5:5 || n ∈ 125:127
        println("$(lpad(n, 4)):\t$(bitstring(Int8(n)))")
    elseif n ∈ -119:-117 || n ∈ 6:8
        println("\t   ⋮")
    end
end
```

Base $16$, called hexadecimal is very common. One hexadecimal character uses four bits. The prefix notation `0x` prior to the digits often indicates a number is represented as hexadecimal. The digit symbols

```julia
using LaTeXStrings, Random

println("The digits:")
print("Hex:\t")
[print(string(n, base = 16), n<10 ? " " : "  ") for n in 0:15];
println()
print("Decimal:")
data = [0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf]
[print(n, " ") for n in data];

println("\n\nSome random values:")
Random.seed!(1)
for _ in 1:5
    x = rand(UInt8)
    println("In decimal (base 10): $x,\t In hex (base 16): $(string(x,base=16))")
end
```

You can also use the prefix notation `0b` to denote binary

```julia
x = 11
@show (x == 0b1011) 
@show (x == 0xb);
```

You can do arithmetic on any base. Specifically for hex and binary.

```julia
println("10 + 6 = ", 0xa + 0x6)
println("16*2 = ", 0x10 * 0b10)
```

Sometimes you need to keep in mind that types have a finite range and arithmetic will wrap around.

```julia
println("Wrap-around of unsigned integers")
x = UInt8(255)
@show x
println("Adding 1: ", x + UInt8(1), "\n")

println("Wrap-around of signed integers")
x = Int8(127)
@show x
println("Adding 1: ", x + Int8(1), "\n" )

println("A \"Normal\" integer") 
x = UInt(0xffffffffffffffff) #Note that UInt = UInt64 on 64 bit computers 
@show x
println("Adding 1: ", x + 1, "\n")
```

Why does this occur? A useful exercise is to examine how addition can be implemented purely using logical operations (as occurs in hardware). Consider the following code

```julia
half_adder(a::Bool, b::Bool) = (xor(a,b), a & b)

function full_adder(a::Bool, b::Bool, carry::Bool)
    (s1, carry_a) = half_adder(a, b)
    (s2, carry_b) = half_adder(s1, carry)
    return (s2, carry_a | carry_b)
end

function add_n_digits(a::Int, b::Int, n)
    #calculate y = a + b using array indexing and logic operations
    #convert to a vector of booleans
    a_bool = digits(Bool, a, base = 2, pad = n)
    b_bool = digits(Bool, b, base = 2, pad = n)
    y_bool = fill(Bool(0), n)
    carry = false
    for i = 1 : n
        (y_bool[i], carry) = full_adder(a_bool[i], b_bool[i], carry)
    end
    return y_bool, a_bool, b_bool
end

#turn boolean array back into a string
display_bool_array(y) = join(reverse(Int.(y)), "")

a = 1
b = 1

y_bool, a_bool, b_bool = add_n_digits(a, b, 16)

println("adding $a + $b")
println("a = $(display_bool_array(a_bool))")
println("b = $(display_bool_array(b_bool))")
println("y = $(display_bool_array(y_bool))", "\n")

a = 1
b = 2^16 - 1 #biggest 16 bit UInt

y_bool, a_bool, b_bool = add_n_digits(a, b, 16)

println("adding $a + $b")
println("a = $(display_bool_array(a_bool))")
println("b = $(display_bool_array(b_bool))")
println("y = $(display_bool_array(y_bool))", "\n")

```

It is a useful exercise to consider how an equivalent logic based approach might work for other seemingly simple operations such as multiplication. Also, consider how many discrete operations are required, as the size of the binary representation increases.

Binary data considered as a string can often appear as hex. 

```julia
data_as_string = "ab0352500fcc" #48 bits
data_as_binary = hex2bytes(data_as_string)
@show data_as_binary;
```

Bit shift operations are efficient and allow you to multiply or divide by powers of 2.

```julia
x = 0b101
@show x
@show bitstring(x)
@show x << 3
@show bitstring(x << 3)
println()

x = 2^4
@show x
@show 2x
@show x << 1
@show x/2
@show x//2
@show x >> 1;
```

The `sizeof()` a variable.

```julia
x = Int8(120)
@show x, sizeof(x)

x = 120
@show x, sizeof(x)

x = "hello"
@show x, sizeof(x)

x = "h"
@show x, sizeof(x)

x = "α"    
@show x, sizeof(x)

x = ones(UInt8,1000)
@show sizeof(x)

x = 2.3
@show sizeof(x)

x = ones(1000)
@show sizeof(x)
;

```

## Julia from the ground up

We start by discussing Julia and a simple "Hello World" example and then continue to three stories which help us explore various aspects of Julia:

1. Square Roots (first story).
2. Factorials (second story).
3. String manipulation (third story).

#### Introduction

* Julia as a language (community, history, and motivation...)
* The Read Evaluate Print Loop REPL. (Demonstration).
* Running from a file from the command line. (Demonstration).
* Jupyter (Demonstration).

#### Hello World Julia

"Hello World" [Taken from SWJ book](https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/helloWorld.jl)

```julia
# Hello World!
println("There is more than one way to say hello:")

# This is an array consisting of three strings
helloArray = ["Hello","G'day","Shalom"]

for i in 1:3
    println("\t", helloArray[i], " World!")
end

println("\nThese squares are just perfect:")

# This construct is called a 'comprehension' (or 'list comprehension')
squares = [i^2 for i in 0:10]

# You can loop on elements of arrays without having to use indexing
for s in squares
    print("  ",s)
end
println()

# The last line of every code snippet is also evaluated as output (in addition to
# any figures and printing output generated previously).
sqrt.(squares)
```

#### Square root (the 1'st story)

* Basics
* Variables (also complex types)
* Types (basic story about types)
* Many methods for the one function
* The Babylonian algorithm 
* Broadcasting as well
* The "quakeIII" algorithm for the reciprocal of square root Float32 

```julia
sqrt(25)
```

```julia
x = sqrt(2)
@show x, x^2

x = sqrt(2f0) #32 bit float (Float32)
@show x, x^2
```

```julia
sqrt(-1)
```

```julia
sqrt(Complex(-1))
```
```julia
√2 #\sqrt + [TAB]
```

In Julia a function (such as `sqrt` or its alias `√`) can have many methods:

```julia
using InteractiveUtils
@which sqrt(2)
```

```julia
@which sqrt(2.0)
```

```julia
@which sqrt(π*im) #\pi + [Tab]
```

What if we wanted to apply square root to several/many elements together? It is common to use the `.` broadcast operator.

```julia
data = [i^2 for i in 0:10]
sqrt.(data) # The "." broadcating operator
```

How can we compute the square root if we didn't have the `sqrt()` function? Of course one answer is to use another in-built alternative:

```julia
x = 36
@show x^0.5
```

But how is such an algorithm implemented? In Julia's source code, in [`math.jl`](https://github.com/JuliaLang/julia/blob/master/base/math.jl#L647-L650) you'll find the following in lines 647-650:

```
@inline function sqrt(x::Union{Float32,Float64})
    x < zero(x) && throw_complex_domainerror(:sqrt, x)
    sqrt_llvm(x)
end
```

Here `sqrt_llvm()` compiles to [Low Level Virtual Machine(LLVM)](https://en.wikipedia.org/wiki/LLVM), so while many functions in Julia are actually implemented in Julia, with square roots it is better to let the underlying low level (LLVM) code handle square roots because it is later changed to assembly code; which is very fast. You can inspect this via the macros `@code_llvm` and `@code_native`.  

This will generally look the same on different computer types (LLVM is hardware agnostic):

```julia
@code_llvm sqrt(2.5)
```

This will look different for different computer types (cpus):

```julia
@code_native sqrt(2.5)
```

However, what if we wanted to do square roots via software? For example,

```julia
sqrt(big(10)^100)
```

What are (in principle) some [methods to compute square roots](https://en.wikipedia.org/wiki/Methods_of_computing_square_roots)? Let's look at them and implement them.

One method is the [Babylonian algorithm](https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method): Say we are given a positive real number $z$ and want its square root. We start with an initial guess $x_0$. We then apply the recursive step,

$$
x_{k+1} = \frac{1}{2}\Big(x_k+\frac{z}{x_k}\Big).
$$
That is, at each step the next iterate is the arithmetic mean of the previous iterate, $x_k$, and $z/x_k$. The Babylonian algorithm runs this iteration until convergence (note the default initial guess in this implementation is $z/2$):

```julia
function bab_sqrt(z ; init_x = z/2, verbose = false, tol = 1e-10)
    x = init_x
    while true
        verbose && println("Babylonian iterate: $x")
        next_x = 0.5*(x + z / x)
        abs(next_x - x) < tol && break
        x = next_x
    end
    x
end

bs, s = bab_sqrt(5000;verbose = true), sqrt(5000)
println("Babylonian:\t$bs\nSystem:\t\t$s")
```

We can view the ancient Babylonian method as an application of the more general [Newton's method](https://en.wikipedia.org/wiki/Newton%27s_method) for solving equations. Our goal is to solve $x^2 = z$ where $z$ is given and $x$ is desired. That is define $f(x) = x^2 - z$ and we wish to find the solution of $f(x) = 0$. Newton's method iterates,

$$
x_{k+1} = x_k - \frac{f(x_k)}{f'(x_k)},
$$

based on an affine (linear) approximation of $f(\cdot)$ at the point $x_k$. Here $f'(\cdot)$ is the derivative, which in our case is $f'(x) = 2x$. So Newton's iterates for finding the square root are,

$$
x_{k+1} = x_k - \frac{x_k^2-z}{2 x_k} = \frac{x_k}{2} + \frac{z}{2x_k} = \frac{1}{2}\Big(x_k+\frac{z}{x_k}\Big).
$$

Sometimes we are not just interested in computing the $\sqrt{z}$, but rather,

$$
\frac{1}{\sqrt{z}}.
$$

A common case for that is when we have a vector, say $u = [u_1, u_2]$ and we wish to create the normalized (unit $L_2$ norm) vector,

$$
\overline{u} = \frac{1}{\|u\|} u = \frac{1}{\sqrt{u_1^2 + u_2^2}} u.
$$

We could obviously just compute the reciprocal $1/\sqrt{z}$ by dividing by $1$, for example in the case of the vector normalization we can do this in Julia in multiple ways:

```julia
using LinearAlgebra
u = [1,1] #A vector pointing in a 45 degree angle up.

uN1 = normalize(u) #Julia has a function for this in linear algebra.
@show uN1

uN2 = u/norm(u) #Here we do it via the norm() function
@show uN2

uN3 = u/sqrt(u'u) # Note that u'u = u_1^2 + u_2^2 (the inner product)
@show uN3

uN4 = u/sqrt(u[1]^2 + u[2]^2)
@show uN4

uN5 = u/sqrt(dot(u,u))
@show uN5;
```

However for the interest of it, lets consider another way to do it which is specific for 32bit floating point numbers: The [Fast Inverse Square Root Algorithm](https://en.wikipedia.org/wiki/Fast_inverse_square_root). This is how the original code appeared in the [C Language](https://en.wikipedia.org/wiki/C_(programming_language)).

```
float Q_rsqrt( float number )
{
	long i;
	float x2, y;
	const float threehalfs = 1.5F;

	x2 = number * 0.5F;
	y  = number;
	i  = * ( long * ) &y;                       // evil floating point bit level hacking
	i  = 0x5f3759df - ( i >> 1 );               // what the f___? 
	y  = * ( float * ) &i;
	y  = y * ( threehalfs - ( x2 * y * y ) );   // 1st iteration
//	y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed

	return y;
}
```

Here is the equivalent code in Julia.

```julia
function fast_inv_sqrt(number::Float32)
    x2 = number*Float32(0.5)
    #reinterpret the float32 number to a 32 bit unsigned integer
    i = reinterpret(UInt32, number)
    #do WTF magic
    i = 0x5f3759df - (i >> 1)
    #reinterpet back into a float32
    y = reinterpret(Float32, i)
    #do an iteration of newtons method from a good first guess
    y = y * (Float32(1.5) - (x2 * y^2))
    return y
end

x = Float32(4.0)
y = fast_inv_sqrt(x)
print("1/√(4) ≈ $(y)")
```

Click the image below to watch a video with a detailed explanation of the algorithm:

[![Fast Inverse Square Root](http://img.youtube.com/vi/p8u_k2LIZyo/0.jpg)](http://www.youtube.com/watch?v=p8u_k2LIZyo "Fast Inverse Square Root")

#### Factorial (the 2'nd story)

* Basics
* Recursion
* BigInts
* The Gamma function
* Accuracy of the Stirling approximation (will use arrays also for plotting)

A few basic ways to compute $10! = 1\cdot 2 \cdot \ldots \cdot 10$:

```julia
f_a = factorial(10)
@show f_a

f_b = *(1:10...)
@show f_b

f_c = last(accumulate(*, 1:10))
@show f_c

f_d = 1
for i in 1:10
    global f_d *= i
end
@show f_d;
```

Observe that,

$$
n! = 
\begin{cases}
n \cdot (n-1)! & n = 1,2,\ldots\\
1 & n = 0.
\end{cases}
$$

This is a recursive definition. Let's implement it:

```julia
function my_factorial(n)
    if n == 0
        return 1
    else
        return n * my_factorial(n - 1)
    end
end

my_factorial(10)
```

Let's see what happens with this recursion:

```julia
function my_factorial(n)
    println("Calling my_factorial($n)")
    if n == 0
        ret_val = 1
    else
        ret_val = n * my_factorial(n - 1)
    end
    println("Returning from the call of my_factorial($n)")
    ret_val
end

my_factorial(10)
```
You can also use the [`stracktrace()`](https://docs.julialang.org/en/v1/manual/stacktraces/) function.


Here is the `my_factorial()` function (written compactly).

```julia
my_factorial(n) = n == 0 ? 1 : n * my_factorial(n-1)

my_factorial(10)
```

Such compact writing does not change what actually happens under the hood. To see this consider both forms:

```julia
my_factorial1(n) = n == 0 ? 1 : n * my_factorial1(n - 1)

function my_factorial2(n)
    if n == 0
        return 1
    else
        return n * my_factorial2(n - 1)
    end
end
```

And use Julia's `@code_lowered` macro to see how Julia parses the code into an intermediate representation (before being further compiled to LLVM). In both forms we get the exact same intermediate form.

```julia
@code_lowered my_factorial1(10)
```

```julia
@code_lowered my_factorial2(10)
```

How large can factorials we compute be? With `BigInt`, created via `big()`, there is sometimes no limit, but if we wanted to stay within the machine word size, we stay with `Int64` (with Julia `Int` is either `Int32` on "32 bit machines" or `Int64` on "64 bit machines). But even 32 bit machines support 64 bit integers (by doubling words).

Lets first use [Stirling's approximation](https://en.wikipedia.org/wiki/Stirling%27s_approximation) to get an estimate of the largest factorial we can compute with `UInt64`.

$$
n! \sim \sqrt{2 \pi} \, n^{n+\frac{1}{2}} e^{-n}
$$

To see the approximation isn't unreasonable, observe that $n! \le n^n$ (why?) but isn't so far either. 
```julia
#An array of named tuples (note that "n!" is just a name)
[(n_fact = factorial(n), n_pow_n = n^n, ratio = factorial(n) / (n^n)) for n in 1:10]
```

The other $\sqrt{n} e^{-n}$ factor of $n$ in Stirling, corrects for this and $\sqrt{2 \pi}$ is a constant.


```julia
stirling(n) = (√(2π*n))*(n/MathConstants.e)^n      

[(
    n! = factorial(n),
    stirling = stirling(n),
    ratio = round(factorial(n) / stirling(n), digits = 5),
) for n in 1:10]
```

So let's use Stirling to see how big $n$ can be to fit in `UInt64`. That is solve 
$$
\sqrt{2 \pi} \, n^{n+\frac{1}{2}} e^{-n}  = 2^{64}-1.
$$
There are multiple ways to try to do this. We'll use floating point numbers and just search. Observe this:

```julia
2^64-1, typeof(2^64-1) #This is a signed integer by default
```

```julia
UInt(2)^64-1, typeof(UInt(2)^64-1) #unsigned
```

```julia
println(UInt(2)^64-1)
```

See also the documentation about [Integers and Floating-Point Numbers](https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/#Integers-and-Floating-Point-Numbers).

With floating point we can do much more:
```julia
2.0^64-1, typeof(2.0^64-1)
```
In general,
```julia
@show typemax(Int64)
@show typemax(UInt64)
@show typemax(Float64);
```

Here is the search (to simplify let's focus on signed integers): 

```julia
limit = typemax(Int64)
n = 1
while stirling(n) <= limit
    global n += 1
end
n -= 1 #why is this here? What can be done instead?
println("Found maximal n for n! with 64 bits to be $n.")
```

Let's try it:

```julia
factorial(20)
```

What about $n=21$?

```julia
factorial(21)
```

Indeed $n=21$ doesn't fit within the 64 bit limit.  However as suggested by the error message, using `big()` can help:

```julia
typeof(big(21))
```

```julia
factorial(big(21))
```

With (software) big integers everything goes:

```julia
n = 10^3
big_stuff = factorial(big(n));
num_digits = Int(ceil(log10(big_stuff))) 
println("The facotrial of $n has $num_digits decimal digits.") 
```

What about factorials of numbers that aren't positive integers?

```julia
factorial(6.5)
```

No, that isn't defined. But you may be looking for the [gamma](https://en.wikipedia.org/wiki/Gamma_function) special function:

$$
\Gamma(z)=\int_{0}^{\infty} x^{z-1} e^{-x} d x.
$$

```julia
using SpecialFunctions #You'll need to add (install) SpecialFunctions

gamma(6.5)
```

To feel more confident this value agrees with the integral definition of $\Gamma(\cdot)$; let's compute the integral in a very crude manner ([Riemann_sum](https://en.wikipedia.org/wiki/Riemann_sum)):

```julia
function my_crude_gamma(z; delta= 0.01, M = 50)
    integrand(x) = x^(z-1)*exp(-x) 
    x_grid = 0:delta:M
    sum(delta*integrand(x) for x in x_grid)
end

my_crude_gamma(6.5)
```
Now note that the gamma function is sometimes considered as the continuous version of the factorial because,
$$
\begin{aligned}
\Gamma(z+1) &=\int_{0}^{\infty} x^{z} e^{-x} d x \\
&=\left[-x^{z} e^{-x}\right]_{0}^{\infty}+\int_{0}^{\infty} z x^{z-1} e^{-x} d x \\
&=\lim _{x \rightarrow \infty}\left(-x^{z} e^{-x}\right)-\left(-0^{z} e^{-0}\right)+z \int_{0}^{\infty} x^{z-1} e^{-x} d x \\
&=z \, \Gamma(z).
\end{aligned}
$$

That is, the recursive relationship $\Gamma(z+1) = z\Gamma(z)$ holds similarly to $n! = n \cdot (n-1)!$. Further 
$$
\Gamma(1) = \int_0^\infty e^{-x} \, dx = 1.
$$
Hence we see that for integer $z$, $\Gamma(z) = (z-1)!$ or $n! = \Gamma(n+1)$. Let's try this.

```julia
using SpecialFunctions
[(n = n, n! = factorial(n), Γ = gamma(n+1)) for n in 0:10]
```

The gamma function can also be extended outside of the positive reals. At some points it isn't defined though.

```julia
@show gamma(-1.1) #here defined.
gamma(-1) #here not defined
```

Here is a plot where we exclude certain points where it isn't defined

```julia
using Plots, SpecialFunctions

z = setdiff(-3:0.001:4, -3:0) #setdifference to remove points where gamma() returns a NaN   
plot(z, gamma.(z), ylim=(-7,7), legend=false, xlabel="z", ylabel="Γ(z)")
```

#### Text, natural language, and strings (the 3'rd story)

We now focus on a different component of programming: dealing with strings, text, and natural language. The [Julia documentation about strings](https://docs.julialang.org/en/v1/manual/strings/) is also very useful.

```julia
my_name = "Janet"
@show sizeof(my_name)

first_char = my_name[begin]  #begin is just like 1
@show first_char

@show typeof(first_char)

@show ((my_name*" ")^4)[begin:end-1]
```

The basic form of representing characters is via the [ASCII code](https://en.wikipedia.org/wiki/ASCII) where each one byte integers are translated into characters and vice-versa. The printable characters start at 0x20 (32) which is "white space".

```julia
println("A rough ASCII table")
println("Decimal\tHex\tCharacter")
for c in 0x20:0x7e
    println(c, "\t", "0x" * string(c, base=16),"\t",Char(c))
end
```

A bit more on characters:

```julia
@show 'a' == "a"
@show 'a' == "a"[begin]
@show 'a'+1;
```

Observe the ASCII codes of `'A'` and `'a'`:

```julia
'A'
```

```julia
`a`
```

So the difference is 0x20 (or 32).

```julia
'a' - 'A'
```

Say we wanted to make a function that converts to upper case like the in-built `uppercase()`:

```julia
my_name = "ramzi"
uppercase("ramzi")
```

How would you do that?

To close, here is an example adapted from the SWJ book. It takes the Shakespere corpus and counts frequencies of words.

```julia
using HTTP, JSON

data = HTTP.request("GET","https://ocw.mit.edu/ans7870/6/6.006/s08/lecturenotes/files/t8.shakespeare.txt")
shakespeare = String(data.body)
shakespeareWords = split(shakespeare)

jsonWords = HTTP.request("GET",
"https://raw.githubusercontent.com/h-Klok/StatsWithJuliaBook/master/data/jsonCode.json")
parsedJsonDict = JSON.parse( String(jsonWords.body))

keywords = Array{String}(parsedJsonDict["words"])
numberToShow = parsedJsonDict["numToShow"]
wordCount = Dict([(x,count(w -> lowercase(w) == lowercase(x), shakespeareWords))
                  for x in keywords])

sortedWordCount = sort(collect(wordCount),by=last,rev=true)
display(sortedWordCount[1:numberToShow])
```
